#!/usr/bin/env python3
# Modification du script LEDMatrix.py pour utiliser gpiozero et ajouter des fonctionnalités

from gpiozero import DigitalOutputDevice
import time

class Broche(DigitalOutputDevice):
    def __init__(self, pin):
        super().__init__(pin)

# Remplacement des broches RPi.GPIO par les classes gpiozero
dataPin = Broche(17)      # DS Pin of 74HC595(Pin14)
latchPin = Broche(27)     # ST_CP Pin of 74HC595(Pin12)
clockPin = Broche(22)     # SH_CP Pin of 74HC595(Pin11)

LSBFIRST = 1
MSBFIRST = 2

# Ajout des caractères manquants (G-Z)
additional_characters = {
    'G': [0x3C, 0x42, 0x00, 0x46, 0x42, 0x42, 0x3C, 0x00],
    'H': [0x42, 0x42, 0x42, 0x7E, 0x42, 0x42, 0x42, 0x00],
    'I': [0x1C, 0x08, 0x08, 0x08, 0x08, 0x08, 0x1C, 0x00],
    'J': [0x0E, 0x04, 0x04, 0x04, 0x44, 0x44, 0x38, 0x00],
    'K': [0x42, 0x44, 0x48, 0x70, 0x48, 0x44, 0x42, 0x00],
    'L': [0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x7E, 0x00],
    'M': [0x42, 0x66, 0x5A, 0x42, 0x42, 0x42, 0x42, 0x00],
    'N': [0x42, 0x62, 0x52, 0x4A, 0x46, 0x42, 0x42, 0x00],
    'O': [0x3C, 0x42, 0x42, 0x42, 0x42, 0x42, 0x3C, 0x00],
    'P': [0x7C, 0x42, 0x42, 0x7C, 0x40, 0x40, 0x40, 0x00],
    'Q': [0x3C, 0x42, 0x42, 0x42, 0x4A, 0x46, 0x3A, 0x00],
    'R': [0x7C, 0x42, 0x42, 0x7C, 0x48, 0x44, 0x42, 0x00],
    'S': [0x3C, 0x42, 0x40, 0x3C, 0x02, 0x42, 0x3C, 0x00],
    'T': [0x7E, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00],
    'U': [0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x3C, 0x00],
    'W': [0x42, 0x42, 0x42, 0x42, 0x5A, 0x66, 0x42, 0x00],
    'X': [0x42, 0x24, 0x24, 0x18, 0x24, 0x24, 0x42, 0x00],
    'Y': [0x44, 0x44, 0x28, 0x10, 0x10, 0x10, 0x10, 0x00],
    'V': [0x42, 0x42, 0x42, 0x42, 0x42, 0x24, 0x18, 0x00],
    'Z': [0x7E, 0x04, 0x08, 0x10, 0x20, 0x40, 0x7E, 0x00]
}

# Mise à jour de la liste des données avec les nouveaux caractères
data = [     # data of "0-F"
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # " "
    0x00, 0x00, 0x3E, 0x41, 0x41, 0x3E, 0x00, 0x00, # "0"
    0x00, 0x00, 0x21, 0x7F, 0x01, 0x00, 0x00, 0x00, # "1"
    0x00, 0x00, 0x23, 0x45, 0x49, 0x31, 0x00, 0x00, # "2"
    0x00, 0x00, 0x22, 0x49, 0x49, 0x36, 0x00, 0x00, # "3"
    0x00, 0x00, 0x0E, 0x32, 0x7F, 0x02, 0x00, 0x00, # "4"
    0x00, 0x00, 0x79, 0x49, 0x49, 0x46, 0x00, 0x00, # "5"
    0x00, 0x00, 0x3E, 0x49, 0x49, 0x26, 0x00, 0x00, # "6"
    0x00, 0x00, 0x60, 0x47, 0x48, 0x70, 0x00, 0x00, # "7"
    0x00, 0x00, 0x36, 0x49, 0x49, 0x36, 0x00, 0x00, # "8"
    0x00, 0x00, 0x32, 0x49, 0x49, 0x3E, 0x00, 0x00, # "9"   
    0x00, 0x00, 0x3F, 0x44, 0x44, 0x3F, 0x00, 0x00, # "A"
    0x00, 0x00, 0x7F, 0x49, 0x49, 0x36, 0x00, 0x00, # "B"
    0x00, 0x00, 0x3E, 0x41, 0x41, 0x22, 0x00, 0x00, # "C"
    0x00, 0x00, 0x7F, 0x41, 0x41, 0x3E, 0x00, 0x00, # "D"
    0x00, 0x00, 0x7F, 0x49, 0x49, 0x41, 0x00, 0x00, # "E"
    0x00, 0x00, 0x7F, 0x48, 0x48, 0x40, 0x00, 0x00, # "F"
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # " "
] + list(additional_characters.values())

def shiftOut(dPin, cPin, order, val):
    for i in range(8):
        cPin.off()
        if order == LSBFIRST:
            dPin.value = (val >> i) & 0x01
        elif order == MSBFIRST:
            dPin.value = (val << i) & 0x80
        cPin.on()
        cPin.off()


def defiler_message(message):
    while True:
        for char in message:
            # Trouver la représentation du caractère dans la matrice de données
            char_data = data[ord(char) - ord(' ')] # À ajuster en fonction de votre mappage
            # Faire défiler le caractère sur la matrice LED
            # ...

def setup():
    # Initialisation des broches, si nécessaire
    pass

def destroy():
    # Nettoyage des broches, si nécessaire
    pass

if __name__ == '__main__':
    print('Program is starting...')
    setup()
    try:
        defiler_message("Hello World")
    except KeyboardInterrupt:
        destroy()
